{% extends "site.twig" %} 

{% block title %}Draft - Visualisation (Adjacency Chord){% endblock %} 
{% block subheader %}Draft - Visualisation (Adjacency Chord){% endblock %} 

{% block bccontainer %}		
	{% include "widgets/breadcrumb.task.twig" %}
{% endblock %}

{% block navsubheader %}
	{% include "widgets/navbar.drafts.twig" with {'navsrc': 'me.draft.view.chord'} %}
{% endblock %}

{% block content %}

<div class="row-fluid"><div class="span12">

	<div class="widget">
		<div class="widget-header">
			<h2> Chord Diagram </h2>
		</div>
		<div class="widget-content">
			<div id='svg-container' style=" overflow: hidden;"></div>
		</div>
		</div>

</div></div>

{% endblock %}

{% block injectJS %}
	{{ parent() }}
<script src="{{ app_base }}/assets/jquery-ui-1.9.2.custom/js/jquery.blockUI.js"></script>
<script src="{{ app_base }}/assets/d3.js/d3.v3.js"></script>
<script src="{{ app_base }}/assets/d3.js/colorbrewer.js"></script>

<script type="text/javascript">
$(document).ready(function(){

	var sections = [
	        		'????',
	        		'#+s:c#', 
	        		'#+s:d_i#', 
	        		'#+s:d#', 
	        		'#+s:s#', 
	        		'#+s:i#', 
	        		'#-s:t#', 
	        		'#+s:p#', 
	        		'#-s:h#', 
	        		'#-s:n#', 
	        		'#-s:q#',  
	        		'#-s:p#',
	        		'xxxxx'					
	        		];	

	// From http://mkweb.bcgsc.ca/circos/guide/tables/
	var matrix = [];

	//$.blockUI({ message: '<div class="ajax alert alert-info"><img src="/assets/openessayist/img/ajax-loader.gif" /> loading and display data ...</div>' }); 
	var xhr = d3.json("{{ urlFor('ajax.graph.json',{"draft":draft.id,"graph":"graphse"}) }}")
		.on("progress", function() { console.log("progress", d3.event.loaded); })
	    .on("error", function(error) { console.log("failure!", error);$.unblockUI(); })
	    .on("load", onloaded)
	    .get();

	function onloaded(graph) {

		/* matrix = [
		     	  [11975,  5871, 8916, 2868],
		     	  [ 1951, 10048, 2060, 6171],
		     	  [ 8010, 16145, 8090, 8045],
		     	  [ 1013,   990,  940, 6907]
		     	];*/

			var nodes = graph.nodes;
			var links = graph.links;
			var n = nodes.length;

			// Not great, get the data into the graph JSON structure
			var categories = {{ category|json_encode|raw  }};
			var sentences = {{ sentence|json_encode|raw  }};
			var rank =  {{ rank|json_encode|raw  }};
			
			var c = d3.scale.ordinal().domain(sections).range(colorbrewer.Paired[11]);
					
			// Compute index per node.
			nodes.forEach(function(node, i) {
				node.group = categories[node.id];
				node.color = c(node.group);
				node.text = sentences[node.id];
				console.log(node.group + " " + node.color);
				idx = $.inArray(node.id, rank);
				node.rank=idx;
				matrix[i] = d3.range(n).map(function(j) { return 0; });
			});

				
			//Convert links to matrix; count character occurrences.
			links.forEach(function(link) {
				//console.log(link);
				matrix[link.source][link.target] += link.weight;
				matrix[link.target][link.source] += link.weight;
			});

			
	     	
		
		var chord = d3.layout.chord()
	    .padding(.05)
	    .sortSubgroups(d3.descending)
	    .matrix(matrix);



	var width = 960,
	    height = 500,
	    innerRadius = Math.min(width, height) * .41,
	    outerRadius = innerRadius * 1.1;

	var fill = d3.scale.ordinal()
	    .domain(d3.range(4))
	    .range(["#000000", "#FFDD89", "#957244", "#F26223"]);

	var svg = d3.select("#svg-container").append("svg:svg")
	    .attr("width", "100%")
	    .attr("height", height)
	    .attr("overflow","hidden")
	  .append("g")
	    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

	svg.append("g").selectAll("path")
	    .data(chord.groups)
	  .enter().append("path")
	    .style("fill", function(d) { return nodes[d.index].color; })
		.style("fill-opacity", function(d) { return 0.5; })
	    .style("stroke", function(d) { return nodes[d.index].color; })
	    .attr("d", d3.svg.arc().innerRadius(innerRadius).outerRadius(outerRadius))
	    .on("mouseover", fade(0))
	    .on("mouseout", fade(1))
	    .each(axisPopover);

	var ticks = svg.append("g").selectAll("g")
	    .data(chord.groups)
	  .enter().append("g").selectAll("g")
	    .data(groupTicks)
	  .enter().append("g")
	  		
	    .attr("transform", function(d) {
	      return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
	          + "translate(" + outerRadius + ",0)";
	    });

	ticks.append("line")
	    .attr("x1", 1)
	    .attr("y1", 0)
	    .attr("x2", 5)
	    .attr("y2", 0)
	    .style("stroke", "#000");

	ticks.append("text")
	    .attr("x", 8)
	    .attr("dy", ".35em")
	    .attr("width", "100px")
	    
	    .attr("transform", function(d) { return d.angle > Math.PI ? "rotate(180)translate(-16)" : null; })
	    .style("text-anchor", function(d) { return d.angle > Math.PI ? "end" : null; })
	    .text(function(d) { return d.label; });

	svg.append("g")
	    .attr("class", "chord")
	  .selectAll("path")
	    .data(chord.chords)
	  .enter().append("path")
	    .attr("d", d3.svg.chord().radius(innerRadius))
	    .style("fill", function(d) { return nodes[d.source.index].color; })
	    .style("opacity", 1);

	// Returns an array of tick angles and labels, given a group.
	function groupTicks(d) {
	  var k = (d.endAngle - d.startAngle) / d.value;
	  return d3.range(0,d.value, d.value/2.01).map(function(v, i) {
	    return {
	      angle: (i==1) ? v * k + d.startAngle: null,
	      label: (i==1) ? nodes[d.index].id /* + " (" + d.value + ")"*/ : null
	    };
	  });
	}
	

	// Returns an event handler for fading a given chord group.
	function fade(opacity) {
	  return function(g, i) {
	    svg.selectAll(".chord path")
	        .filter(function(d) { return d.source.index != i && d.target.index != i; })
	      .transition()
	        .style("opacity", opacity);
	  };
	}
	
	function axisPopover(d,i)
	{
		$(this).popover({
			title:"Sentence" , 
		    container:"body",
		    trigger: 'click',
		    html : true,
		    placement: function()
		    {
			    if (d.startAngle> 7*Math.PI/4)
				    return "top";
			    else if (d.startAngle> 5*Math.PI/4)
			    	return "left";
			    else if (d.startAngle> 3*Math.PI/4)
			    	return "bottom";
			    else if (d.startAngle> Math.PI/4)
			    	return "right";
			    else return "top";
		    	
			},
	    
		    content: function() 
		    	{ 	
	    			var rank = (nodes[i].rank==-1)? "" : "<span class='badge badge-info'>"+(nodes[i].rank+1)+"</span>";
	    			var tag  = "<span class='badge'>"+nodes[i].group+"</span>";
					return sentences[nodes[i].id] + "<p>"+tag + rank+"</p>";} , 
			});
	}
		
	};

	
});
</script>
{% endblock %}

{% block injectCSS %}
	{{ parent() }}
<style type="text/css">
.ajax.alert
{
	margin-bottom: 0px;
	font-weight: bolder;
}
.background {
  fill: #eee;
}

line {
  stroke: #fff;
}

text.active {
  fill: red;
  font-weight: bold;
}
    </style>
{% endblock %}