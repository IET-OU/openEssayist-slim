{% extends "site.twig" %} 

{% block title %}Draft - Visualisation ({{ views[view].name }}){% endblock %} 


{% block bccontainer %}		
	{% include "widgets/breadcrumb.panel.twig" %}
	    <li><div class="btn-group">
    	<a href="{{ urlFor('me.drafts',{"idt":task.id}) }}" class="btn btn-small" >
    		<i class="icon-pencil"></i><span class="hidden-phone hidden-tablet"> {{ task.name }}</span></a>
	</div></li>
	<li><div class="btn-group">
    	<a href="{{ urlFor('me.draft.show',{"draft":draft.id}) }}" class="btn btn-small" >Overview</a>
	   	<a href="{{ urlFor('me.draft.keywords',{"draft":draft.id}) }}" class="btn btn-small" >Keywords</a>
    	<a href="{{ urlFor('me.draft.sentence',{"draft":draft.id}) }}" class="btn btn-small" >Sentences</a>
    	<a href="{{ urlFor('me.draft.stats',{"draft":draft.id}) }}" class="btn btn-small" >Stats</a>
   	</div></li>
{% endblock %}

{% block content %}

<ul class="breadcrumb">
	<li><div class="btn-group">
	{% for key,item in views %}
		{% if key == view %}
			<button class="btn btn-small active disabled">{{ item.name }}</button>
		{% else %}
			<a href="{{ urlFor('me.draft.view.graph',{"draft":draft.id,"graph":key}) }}" class="btn btn-small" >{{ item.name }}</a>
		{% endif %}
    {% endfor %}
	   	
    </div></li>
</ul>

<div class="row-fluid"><div class="span12">

<div class="widget">
			<div class="widget-header" data-toggle="collapse" data-target="#demo">
				<h3> Display Options </h3>
				<div class="box-icon">
					<a class="btn-setting" href="#"><i class="icon-chevron-down"></i></a>
				</div>
			</div>
			<div class="widget-content" id='svg-container'></div>
			</div>
</div></div>

{% endblock %}

{% block injectJS %}
<script src="/assets/d3.js/d3.v3.min.js"></script>
<script type="text/javascript">

var nodes = {{ graph.nodes|json_encode|raw  }};
var links = {{ graph.links|json_encode|raw  }};

var w = 960,
    h = 500;

var force = d3.layout.force()
    .nodes(d3.values(nodes))
    .links(links)
    .size([w, h])
    .linkDistance(150)
    .charge(-1000)
    .on("tick", tick)
    .start();


var svg = d3.select("#svg-container").append("svg:svg")
    .attr("width", w)
    .attr("height", h);

// Per-type markers, as they don't inherit styles.
svg.append("svg:defs").selectAll("marker")
    .data(["suit", "licensing", "resolved"])
  .enter().append("svg:marker")
    .attr("id", String)
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 15)
    .attr("refY", -1.5)
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("orient", "auto")
  .append("svg:path")
    .attr("d", "M0,-5L10,0L0,5");

var path = svg.append("svg:g").selectAll("path")
    .data(force.links())
  .enter().append("svg:path")
    .attr("class", function(d) { return "link " + d.type; })
    .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });

   
var circle = svg.append("svg:g").selectAll("circle")
    .data(force.nodes())
  .enter().append("svg:circle")
    .attr("r", 6)
    .call(force.drag);

var text = svg.append("svg:g").selectAll("g")
    .data(force.nodes())
  .enter().append("svg:g");

// A copy of the text with a thick white stroke for legibility.
text.append("svg:text")
    .attr("x", 8)
    .attr("y", ".31em")
    .attr("class", "shadow")
    .text(function(d) { return d.id; });

text.append("svg:text")
    .attr("x", 8)
    .attr("y", ".31em")
    .text(function(d) { return d.id; });

// Use elliptical arc path segments to doubly-encode directionality.
function tick() {
  path.attr("d", function(d) {
    var dx = d.target.x - d.source.x,
        dy = d.target.y - d.source.y,
        dr = Math.sqrt(dx * dx + dy * dy);
    return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
  });

  circle.attr("transform", function(d) {
    return "translate(" + d.x + "," + d.y + ")";
  });

  text.attr("transform", function(d) {
    return "translate(" + d.x + "," + d.y + ")";
  });
}

    </script>
{% endblock %}

{% block injectCSS %}
<style type="text/css">

.link {
  stroke: #999;
  stroke-opacity: .6;
  stroke-width: 1.5px;
}

path.link {
  fill: none;
  stroke: #666;
  stroke-width: 1.5px;
}

marker#licensing {
  fill: green;
}

path.link.licensing {
  stroke: green;
}

path.link.resolved {
  stroke-dasharray: 0,2 1;
}

circle {
  fill: #ccc;
  stroke: #333;
  stroke-width: 1.5px;
}

text {
  font: 10px sans-serif;
  pointer-events: none;
}

text.shadow {
  stroke: #fff;
  stroke-width: 3px;
  stroke-opacity: .8;
}

    </style>
{% endblock %}