{% extends "site.twig" %} 

{% block title %}Draft - Sentences{% endblock %} 

{% block bccontainer %}		
	{% include "widgets/breadcrumb.panel.twig" %}
	    <li><div class="btn-group">
    	<a href="{{ urlFor('me.drafts',{"idt":task.id}) }}" class="btn btn-small" >
    		<i class="icon-pencil"></i><span class="hidden-phone hidden-tablet"> {{ task.name }}</span></a>
	</div></li>
	<li><div class="btn-group">
    	<a href="{{ urlFor('me.draft.show',{"draft":draft.id}) }}" class="btn btn-small" >Overview</a>
    	<a href="{{ urlFor('me.draft.keywords',{"draft":draft.id}) }}" class="btn btn-small" >Keywords</a>
    	<button class="btn btn-small active disabled">Sentences</button>
    	<a href="{{ urlFor('me.draft.stats',{"draft":draft.id}) }}" class="btn btn-small" >Stats</a>
    	</div></li>
	<li><div class="btn-group">
		<a class="btn btn-small dropdown-toggle" data-toggle="dropdown" href="#">Views <span class="caret"></span></a>
    	<ul class="dropdown-menu">
			<li><a href="{{ urlFor('me.draft.view.dispersion',{"draft":draft.id}) }}">Keyword Dispersion</a>
			<li class="divider"></li>
    	  	<li><a href="{{ urlFor('me.draft.view.graph',{"draft":draft.id,"graph":"graphke"}) }}">Keyword Graph</a>
    	  	<li><a href="{{ urlFor('me.draft.view.graph',{"draft":draft.id,"graph":"graphse"}) }}">Sentence Graph</a>
		</ul></div>
    </li>    	
{% endblock %}

{% block content %}


<div class="row-fluid"><div class="span12">
	<div class="widget">
			<div class="widget-header">
				<h3> Sentences </h3>
			</div>
			<div class="widget-toolbar">
				<div class="btn-toolbar" id="options">
				    <div class="btn-group option-set"  data-toggle="buttons-radio" data-option-key="sortBy">
    					<button class="btn" data-option-value="rank">Rank</button>
					    <button class="btn" data-option-value="id">Order</button>
					    <button class="btn" data-option-value="tag">Structure</button>
    				</div>
				</div>
			</div>
			
	</div>
</div></div>


<div class="widget-isotope clearfix " id="container">
				{#<table class="table table-condensed table-striped table-bordered">
				<tbody>
				{% for sentence in sentences %}
					<tr><td>{{ sentence.text  }}</td>	</tr>
				{% endfor %}
				</tbody>
				</table>#} 
				{% for sentence in sentences %}
					
					<div class="sent" data-tag="{{ sentence.tag}}" 
						 			  data-rank="{{ sentence.rank}}" 
						 			  data-id="{{ sentence.id}}" >
						<span>{{ sentence.text}}</span>
						 			  					</div>
				{% endfor %}
			</div> 
		</div>
{% endblock %}

{% block injectJS %}
<script src="/assets/jquery.isotope.min.js"></script>
<script src="/assets/d3.js/colorbrewer.js"></script>

<script type="text/javascript">
$(function(){

    var $container = $('#container');

    $container.isotope({
		layoutMode : 'straightDown',
    	getSortData : {
    		tag : function( $elem ) {
            		return $elem.attr('data-tag');
            	},
			rank : function( $elem ) {
            		return parseInt( $elem.attr('data-rank'), 10 );
          		},
			id : function( $elem ) {
            		return parseInt( $elem.attr('data-id'), 10 );
          	}
          }
    	
    });
    
    
      var $optionSets = $('#options .option-set'),
          $optionLinks = $optionSets.find('button');

      $optionLinks.click(function(){
        var $this = $(this);
        // don't proceed if already selected
        if ( $this.hasClass('selected') ) {
          return false;
        }
        var $optionSet = $this.parents('.option-set');
        $optionSet.find('.selected').removeClass('selected');
        $this.addClass('selected');
  
        // make option object dynamically, i.e. { filter: '.my-filter-class' }
        var options = {},
            key = $optionSet.attr('data-option-key'),
            value = $this.attr('data-option-value');
        // parse 'false' as false boolean
        value = value === 'false' ? false : value;
        options[ key ] = value;
        if ( key === 'layoutMode' && typeof changeLayoutMode === 'function' ) {
          // changes in layout modes need extra logic
          changeLayoutMode( $this, options )
        } else {
          // otherwise, apply new options
          $container.isotope( options );
        }
        
        return false;
      });


  });
  
/*$(document).ready(function() {
	var $container = $('#container');
	$container.isotope({
		layoutMode : 'straightDown',
		itemSelector : '.sent',
		animationOptions: {
		     duration: 150,
		   },
		getSortData : {
			rank : function( $elem ) {
	            return parseInt($elem.attr('data-rank'),10);
	          },
	        id : function( $elem ) {
		            return $elem.attr('data-id');
		          },
			tag : function( $elem ) {
			            return $elem.attr('data-tag');
			          }
		}
	});

	var $optionSets = $('#options .option-set'),
    	$optionLinks = $optionSets.find('button');

	 $optionLinks.click(function(){
		 var $this = $(this);

		// don't proceed if already selected
	        if ( $this.hasClass('active') ) {
	          return false;
	        }

	        var $optionSet = $this.parents('.option-set');
	        $optionSet.find('.btn-primary').removeClass('btn-primary');
	        $this.addClass('btn-primary');

	        // make option object dynamically, i.e. { filter: '.my-filter-class' }
	        var options = {},
	            key = $optionSet.attr('data-option-key'),
	            value = $this.attr('data-option-value');
            	        
		 console.log(key,value);

		 value = value === 'false' ? false : value;
	        options[ key ] = value;
	        if ( key === 'layoutMode' && typeof changeLayoutMode === 'function' ) {
	          // changes in layout modes need extra logic
	          changeLayoutMode( $this, options )
	        } else {
	          // otherwise, apply new options
	          $container.isotope( options );
	        }
	        
	        return false;
		 });
	
});*/

</script>
{% endblock %}

{% block injectCSS %}
<style type="text/css">

.widget-isotope
{
	padding: 10px;
}

.sent:before
  {
  	content: "[" attr(data-tag) "][" attr(data-rank) "][" attr(data-id) "]";
  }



.isotope,
.isotope .isotope-item {
  /* change duration value to whatever you like */
  -webkit-transition-duration: 01.8s;
     -moz-transition-duration: 01.8s;
      -ms-transition-duration: 01.8s;
       -o-transition-duration: 01.8s;
          transition-duration: 01.8s;
}

.isotope {
  -webkit-transition-property: height, width;
     -moz-transition-property: height, width;
      -ms-transition-property: height, width;
       -o-transition-property: height, width;
          transition-property: height, width;
}

.isotope .isotope-item {
  -webkit-transition-property: -webkit-transform, opacity;
     -moz-transition-property:    -moz-transform, opacity;
      -ms-transition-property:     -ms-transform, opacity;
       -o-transition-property:      -o-transform, opacity;
          transition-property:         transform, opacity;
}

</style>
{% endblock %}