{% extends "site.twig" %} 

{% block title %}{{ task.name }} v{{ draft.version }} - Word Limit{% endblock %} 
{% block subheader %}Your Draft : Word Limit{% endblock %} 

{% block bccontainer %}		
	{% include "widgets/breadcrumb.task.twig" %}
{% endblock %}

{% block navsubheader %}
	{% include "widgets/navbar.drafts.twig" with {'navsrc': 'me.draft.view.target'} %}
{% endblock %}

{% block content %}

<div class="row-fluid">



<div class="span12"><div class="widget">
	<div class="widget-header">
		<h2>Word Limit</h2>
	</div>
	<div class="widget-content">
		<div id="struct_bullet" style="height: 500px;margin: 0 auto"></div>
	</div>
</div></div>
</div>

<div class="row-fluid">
<div class="span12"><div class="widget">
	<div class="widget-header">
		<h2>Word Limit (Data Table)</h2>
	</div>
	<div class="widget-content">
	
	<table id="data-table" class="table table-striped  table-hover table-condensed">
	<thead>
		<tr>
			<th></th>
			<th>Structure</th>
			<th>Word count</th>
			<th>Share</th>
			<th>Target</th>
		</tr>	
	</thead>
	<tbody>
		{% set sumratings = 0 %}
		{% for item in breakdown %}
  			{% set sumratings = sumratings + item.y %}
		{% endfor %}
		{% for item in breakdown %}
		<tr>
			<td>{{ item.color }}</td>
			<td>{{ item.name }}</td>
			<td>{{ item.y }}</td>
			<td>{{ (100 * item.y / sumratings)|number_format(1) ~' %'}}</td>
			<td></td>
		</tr>
		{% endfor %}
	</tbody>
	<tfoot><tr>
			<th></th>
			<th>Total</th>
			<th>{{ sumratings }}</th>
			<th>{{ (100)|number_format(1) ~' %'}}</th>
			<th>{{task.wordcount}}</th>
	</tr></tfoot>
	<caption>Word count compared to the word limit of the assignment</caption>
	</table>
	</div>
</div></div>

</div>

{% endblock %}

{% block injectCSS %}
	{{ parent() }}
<style>
	
table.table thead .sorting,
table.table thead .sorting_asc,
table.table thead .sorting_desc,
table.table thead .sorting_asc_disabled,
table.table thead .sorting_desc_disabled {
    cursor: pointer;
    *cursor: hand;
}


 
table.table thead .sorting:after { font-family: FontAwesome; content: "   ";}
table.table thead .sorting_asc:after { font-family: FontAwesome; content: "   ";}
table.table thead .sorting_desc:after { font-family: FontAwesome; content: "   ";}

table.table thead .sorting_asc_disabled {  }
table.table thead .sorting_desc_disabled { }	
	
	</style>
{% endblock %}
	
{% block injectJS %}
	{{ parent() }}
<script src="{{ app_base }}/assets/highcharts/js/highcharts.js"></script>
<script src="{{ app_base }}/assets/highcharts/js/modules/exporting.js"></script>
<script src="{{ app_base }}/assets/d3.js/colorbrewer.js"></script>
<script src="{{ app_base }}/assets/jquery.dataTables/js/jquery.dataTables.min.js"></script>
<script src="{{ app_base }}/assets/jquery.dataTables/js/plugin.dataTableExt.js"></script>
<script type="text/javascript">
$(document).ready(function() {
	$('#data-table').dataTable( {
		"bPaginate": false,
        "bLengthChange": false,
        "bFilter": false,
        "bSort": true,
        "bInfo": false,
        "bAutoWidth": false,
        "aaSorting": [[ 2, "desc" ]],
        "aoColumnDefs": [
			{ "bSortable": false, "aTargets": [ 0,4 ] },
			{ "sType": "percent", "aTargets": [ 3 ] }
		]
    } );

	// Create a RGBa color from a HEX string
	function hexToRgba(hex,opacity) {
	    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	    if (result)
	    {
	        r= parseInt(result[1], 16);
	        g= parseInt(result[2], 16);
	        b= parseInt(result[3], 16);
	        return "rgba("+r+","+g+","+b+",.5)";
	    } 
	    else return hex;
	}

	// Map color index to the ColorBrewer set
	function getColor(obj)
	{	
		idx = obj['color'];
		clr = hexToRgba(colorbrewer.Paired[11][idx],.5);
		obj['color'] = clr;
		obj['index']=2;
		return obj;
	}

	// Apply the color mapping to both series 
	var bullet = {{ bullet|json_encode|raw }};
	bullet = bullet.map(getColor);  

	// Add the target to the bullet graph series
	bullet.push({name:"Target",color: "{{ (target.inlimit)?'green':'red' }}",pointWidth:100,type: "scatter",data:[{{task.wordcount}}],});

	// General HighCharts configuration 
	var hcOptions = {
			credits:{enabled:false},
		    exporting:{enabled:false},
		    title:{text:'Word count compared to the word limit of the assignment'},
	        exporting: {
	            enabled: true,
	            sourceWidth: 1175 ,
	            sourceHeight: 825,
	        },
		    chart: {
				plotBackgroundColor: null,
		        plotBorderWidth: null,
		        plotShadow: false
			}
	};

	// Build the Bullet Graph
	$('#struct_bullet').highcharts($.extend(true,{}, hcOptions,{
		chart:{type:'bar'},
        tooltip: {
			formatter: function () {
				if (this.series.type == 'scatter')
					return this.series.name + ": <b>" + Highcharts.numberFormat(this.y,0) + "</b> words";
				else
					return this.series.name + ": <b>" + Highcharts.numberFormat(this.y,0) + "</b> words (out of "+ this.total +")<br>" 
					+ 'Structure share: <b>' + Highcharts.numberFormat(this.percentage, 1) + '%</b>';
				}
        },
		xAxis:{tickLength:10,
	        lineColor:'#999',
	        lineWidth:1,
	        labels:{style:{fontWeight:'bold'}}  ,categories:['']},
	    yAxis:{
	        tickColor:'#ccc',
	        title:{text: null},
	        plotBands:[
				{	from: 	{{(task.wordcount)*0.9}},
					to:		{{(task.wordcount)*1.1}},
					color: "{{ (target.inlimit)?'rgba(0,255,0,.10)':'rgba(255,0,0,.10)' }}"
				},
			]},
	    plotOptions: {
            series: {stacking: 'normal'},
            scatter:{
                marker:{symbol:'diamond',radius:8},
                tooltip: {
        			formatter: function () {
        				return "fddfdf";
                     }
            	   
                },
            },
            bar: {
               
           
            }
        },
		series: bullet
	}));

});
</script>
{% endblock %}