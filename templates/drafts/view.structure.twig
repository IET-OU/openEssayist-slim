{% extends "site.twig" %} 

{% block title %}{{ task.name }} v{{ draft.version }} - Word Count{% endblock %} 
{% block subheader %}Your Draft : Word Count{% endblock %} 

{% block bccontainer %}		
	{% include "widgets/breadcrumb.task.twig" %}
{% endblock %}

{% block navsubheader %}
	{% include "widgets/navbar.drafts.twig" with {'navsrc': 'me.draft.view.structure'} %}
{% endblock %}

{% block content %}

<div class="row-fluid">

<div class="span12"><div class="widget">
	<div class="widget-header">
		<h3>Word Count</h3>
	</div>
	<div class="widget-content">
		<div id="struct_pie" style="height: 500px;margin: 0 auto"></div>
	</div>
</div></div>

</div>

{% endblock %}

{% block injectCSS %}
	{{ parent() }}

{% endblock %}
	
{% block injectJS %}
	{{ parent() }}
<script src="{{ app_base }}/assets/highcharts/js/highcharts.js"></script>
<script src="{{ app_base }}/assets/d3.js/colorbrewer.js"></script>
<script type="text/javascript">
$(document).ready(function() {

	// Create a RGBa color from a HEX string
	function hexToRgba(hex,opacity) {
	    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	    if (result)
	    {
	        r= parseInt(result[1], 16);
	        g= parseInt(result[2], 16);
	        b= parseInt(result[3], 16);
	        return "rgba("+r+","+g+","+b+",.5)";
	    } 
	    else return hex;
	}

	// Map color index to the ColorBrewer set
	function getColor(obj)
	{	
		idx = obj['color'];
		clr = hexToRgba(colorbrewer.Paired[11][idx],.5);
		obj['color'] = clr;
		return obj;
	}

	// Apply the color mapping to both series 
	var breakdown = {{ breakdown|json_encode|raw }};
	breakdown = breakdown.map(getColor);  

	// General HighCharts configuration 
	var hcOptions = {
			credits:{enabled:false},
		    exporting:{enabled:false},
		    title:{text:null},
			chart: {
				plotBackgroundColor: null,
		        plotBorderWidth: null,
		        plotShadow: false
			}
	};

	$('#struct_pie').highcharts($.extend(true,{}, hcOptions,{
         tooltip: {
			formatter: function () {
                 return this.point.name + ": <b>" + this.point.y +"</b> words (out of "+ this.total +")<br>" +  
                 this.series.name + ': <b>' + Highcharts.numberFormat(this.percentage, 1) + '%</b>';
             }
    	   
        },
        plotOptions: {
            pie: {
                allowPointSelect: true,
                showInLegend: true,
                cursor: 'pointer',
                dataLabels: {
                    enabled: true,
                    color: '#000000',
                    connectorColor: '#000000',
                    formatter: function() {
                        return '<b>'+ this.point.name +'</b>: '+ Highcharts.numberFormat(this.percentage, 1) +' %';
                    }
                }
            }
        },
        series: [{
            type: 'pie',
            name: 'Structure share',
            data: breakdown
        	
        }]
    }));

});
</script>
{% endblock %}