{% extends "site.twig" %} 

{% block title %}{{ task.name }} v{{ draft.version }} - Word Count{% endblock %} 
{% block subheader %}Your Draft : Word Count{% endblock %} 

{% block bccontainer %}		
	{% include "widgets/breadcrumb.task.twig" %}
{% endblock %}

{% block navsubheader %}
	{% include "widgets/navbar.drafts.twig" with {'navsrc': 'me.draft.view.structure'} %}
{% endblock %}

{% block content %}

<div class="row-fluid">

<div class="span12"><div class="widget">
	<div class="widget-header">
		<h2>Word Count</h2>
	</div>
	<div class="widget-content">
		<div id="struct_pie" style="height: 500px;margin: 0 auto"></div>
	</div>
</div></div>

</div>
<div class="row-fluid">

<div class="span12"><div class="widget">
	<div class="widget-header">
		<h2>Word Count (Data Table)</h2>
	</div>
	<div class="widget-content">

	<table id="data-table" class="table table-striped  table-hover table-condensed">
	<thead>
		<tr>
			<th></th>
			<th>Structure</th>
			<th>Word count</th>
			<th>Share</th>
		</tr>	
	</thead>
	<tbody>
		{% set sumratings = 0 %}
		{% for item in breakdown %}
  			{% set sumratings = sumratings + item.y %}
		{% endfor %}
		{% for item in breakdown %}
		<tr>
			<td>{{ item.color }}</td>
			<td>{{ item.name }}</td>
			<td>{{ item.y }}</td>
			<td>{{ (100 * item.y / sumratings)|number_format(1) ~' %'}}</td>
		</tr>
		{% endfor %}
	</tbody>
	<tfoot><tr>
			<th></th>
			<th>Total</th>
			<th>{{ sumratings }}</th>
			<th>{{ (100)|number_format(1) ~' %'}}</th>
	</tr></tfoot>
	<caption>Breakdown of word count per structure parts</caption>
	</table>
	</div>
</div></div>

</div>

{% endblock %}

{% block injectCSS %}
	{{ parent() }}
	
	<style>
	
table.table thead .sorting,
table.table thead .sorting_asc,
table.table thead .sorting_desc,
table.table thead .sorting_asc_disabled,
table.table thead .sorting_desc_disabled {
    cursor: pointer;
    *cursor: hand;
}


table.table thead .sorting:after { font-family: FontAwesome; content: "   ";}
table.table thead .sorting_asc:after { font-family: FontAwesome; content: "   ";}
table.table thead .sorting_desc:after { font-family: FontAwesome; content: "   ";}

table.table thead .sorting_asc_disabled {  }
table.table thead .sorting_desc_disabled { }	
	
	</style>

{% endblock %}
	
{% block injectJS %}
	{{ parent() }}
<script src="{{ app_base }}/assets/highcharts/js/highcharts.js"></script>
<script src="{{ app_base }}/assets/highcharts/js/modules/exporting.js"></script>
<script src="{{ app_base }}/assets/d3.js/colorbrewer.js"></script>
<script src="{{ app_base }}/assets/jquery.dataTables/js/jquery.dataTables.min.js"></script>
<script src="{{ app_base }}/assets/jquery.dataTables/js/plugin.dataTableExt.js"></script>
<script type="text/javascript">


	
$(document).ready(function() {
	$('#data-table').dataTable( {
		"bPaginate": false,
        "bLengthChange": false,
        "bFilter": false,
        "bSort": true,
        "bInfo": false,
        "bAutoWidth": false,
        "aaSorting": [[ 2, "desc" ]],
    	"aoColumnDefs": [
			{ "bSortable": false, "aTargets": [ 0 ] },
			{ "sType": "percent", "aTargets": [ 3 ] }
		]
	} );
	
	// Create a RGBa color from a HEX string
	function hexToRgba(hex,opacity) {
	    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	    if (result)
	    {
	        r= parseInt(result[1], 16);
	        g= parseInt(result[2], 16);
	        b= parseInt(result[3], 16);
	        return "rgba("+r+","+g+","+b+",.5)";
	    } 
	    else return hex;
	}

	// Map color index to the ColorBrewer set
	function getColor(obj)
	{	
		idx = obj['color'];
		clr = hexToRgba(colorbrewer.Paired[11][idx],.5);
		obj['color'] = clr;
		return obj;
	}

	// Apply the color mapping to both series 
	var breakdown = {{ breakdown|json_encode|raw }};
	breakdown = breakdown.map(getColor);  

	// General HighCharts configuration 
	var hcOptions = {
			credits:{enabled:false},
		    exporting:{enabled:false},
		    title:{text:'Breakdown of word count per structure parts'},
	        exporting: {
	            enabled: true,
	            sourceWidth: 1175 ,
	            sourceHeight: 825,
	        },
		    chart: {
				plotBackgroundColor: null,
		        plotBorderWidth: null,
		        plotShadow: false
			}
	};

	$('#struct_pie').highcharts($.extend(true,{}, hcOptions,{
         tooltip: {
			formatter: function () {
                 return this.point.name + ": <b>" + this.point.y +"</b> words (out of "+ this.total +")<br>" +  
                 this.series.name + ': <b>' + Highcharts.numberFormat(this.percentage, 1) + '%</b>';
             }
    	   
        },
        plotOptions: {
            pie: {
                allowPointSelect: true,
                showInLegend: true,
                cursor: 'pointer',
                dataLabels: {
                    enabled: true,
                    color: '#000000',
                    connectorColor: '#000000',
                    formatter: function() {
                        return '<b>'+ this.point.name +'</b>: '+ Highcharts.numberFormat(this.percentage, 1) +' %';
                    }
                }
            }
        },
        series: [{
            type: 'pie',
            name: 'Structure share',
            data: breakdown
        	
        }]
    }));

});
</script>
{% endblock %}