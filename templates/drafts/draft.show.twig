{% extends "site.twig" %} 

{% set helpers = {
	'text': 'text only',
	'keyword': 'with key words',
	'sentence': 'with key sentences',
	'all': 'with all elements'
} %}


{% block title %}{{ task.name }} v{{ draft.version }} - Essay Overview ({{ helpers[mashup] }}){% endblock %} 
{% block subheader %}Your Draft : Overview ({{ helpers[mashup] }}){% endblock %} 


{% block bccontainer %}		
	{% include "widgets/breadcrumb.task.twig" %}
{% endblock %}

{% block navsubheader %}
	{% include "widgets/navbar.drafts.twig" with {'navsrc': 'me.draft.show'} %}
{% endblock %}

{% block content %}


<div class="row-fluid"><div class="span12">
	
	<div class="widget">
		<div class="widget-header">
			<h3>Your essay</h3>
		</div>
		<div class="widget-toolbar "><div class="btn-toolbar form-inline">    
			
			<div class="btn-group">
				<label style="margin-right: 5px;" class="checkbox">Show: </label>	
				<a class="btn btn-small {{ mashup=='text' ? 'active'}}" href="{{ urlFor('me.draft.show',{'draft':draft.id,'cmd':''}) }}">Text</a>
				<a class="btn btn-small {{ mashup=='keyword' ? 'active'}}" href="{{ urlFor('me.draft.showext',{'draft':draft.id,'cmd':'keyword'}) }}">Key Words</a>
				<a class="btn btn-small {{ mashup=='sentence' ? 'active'}}" href="{{ urlFor('me.draft.showext',{'draft':draft.id,'cmd':'sentence'}) }}">Key Sentences</a>
				<a class="btn btn-small {{ mashup=='all' ? 'active'}}" href="{{ urlFor('me.draft.showext',{'draft':draft.id,'cmd':'all'}) }}">All</a>
			</div>
			{% if mashup == 'all' %}
    		<div class="btn-group">
		    	<button data-target="#myModal" role="button" class="btn btn-small " data-toggle="modal">
					More Options...</button>
			</div>
			{% endif  %}
        </div></div>
		
		
		
		<div class="widget-content assignment myessay openessay" style="display: none;"><i class="icon-quote-left icon-4x pull-left icon-muted"></i>
			<p>{{ task.assignment | raw | nl2br }}</p>
		</div>
        
		<div class="widget-content widget-essay myessay openessay">
		{% for par in parasenttok %}
			
			<div class="par-wrapper" {{ (par.partag)?"data-tag=#{ par.partag }":"" }}>
				<div class="par-tag" {{ (par.partag)?"data-tag=#{ par.partag }":"" }}>
					<span class="icon-stack">
          			<i class="icon-circle-blank  icon-stack-base"></i>
          			<i class="icon-heading "></i>
        </span>
				</div>
				<div class="par-container">
					<p id="{{ loop.index0 }}" class='oe-par' >
			{% for sent in par %}
						<span class="oe-snt" data-index="{{ sent.id }}" data-tag="{{ sent.tag }}" {{ (sent.rank is defined)? "data-rank="~(sent.rank+1):"" }}>
						  {{ sent.text }}</span>
			{% endfor %}
					</p>
				</div>
			</div>
		{% endfor %}
		</div>        
        
		
	</div>

</div></div>


<div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-header">
		<h3> Display Options</h3>
	</div>
	<div class="modal-body">
	
	<div class="row-fluid">

	{% if not(config.structure.show is defined and config.structure.show == false) %}
	{% set cfg = config.structure %}
	{% set dsb = (cfg.modify is sameas(false))?"disabled" %}
	<div class="widget-content span3"> 
		<legend>Structure</legend>
    	<label class="checkbox"> 
			<input  type="checkbox" value="#-s:t#" class="cStructure" {{ ('#-s:t#' is inOption(cfg.check))? "checked=\"checked\""}} {{ dsb }}> 
			Title
		</label>
		<label class="checkbox"> 
			<input  type="checkbox" value="#-s:h#" class="cStructure" {{ ('#-s:h#' is inOption(cfg.check))? "checked=\"checked\""}} {{ dsb }}>  
			Headings
		</label>
		<label class="checkbox"> 
			<input  type="checkbox" value="#+s:i#" class="cStructure" {{ ('#+s:i#' is inOption(cfg.check))? "checked=\"checked\""}} {{ dsb }}>  
			Introduction
		</label>
		<label class="checkbox"> 
			<input  type="checkbox" value="#+s#" class="cStructure" {{ ('#+s#' is inOption(cfg.check))? "checked=\"checked\""}} {{ dsb }}>  
			Body
		</label>
		<label class="checkbox"> 
			<input type="checkbox" value="#+s:c#" class="cStructure" {{ ('#+s:c#' is inOption(cfg.check))? "checked=\"checked\""}} {{ dsb }}>  
			Conclusion
		</label>
		<label class="checkbox"> 
			<input type="checkbox" value="#-s:q#;#-s:n#;#-s:p#" class="cStructure" {{ ('#-s:q#' is inOption(cfg.check))? "checked=\"checked\""}} {{ dsb }}>  
			Others
		</label>
									
	</div>
	{% endif %}
	
	{% if not(config.sentence.show is defined and config.sentence.show == false) %}
	<div class="widget-content span3"> 
		<legend> Sentences </legend>

		<div class="controls controls-row">
			<div class="control-group">
				<label class="">Top Sentences: <span id="amount" class="input unedidtable-input">0 - 0</span> </label>
				<div id="slider-range"></div>
				<span class="help-block">Set range of top sentences to display.</span> 
			</div>
		</div>
	</div> 
	{% endif %}
	
	{% if not(config.keyword.show is defined and config.keyword.show == false) %}
	{% set cfg = config.keyword %}
	<div class="widget-content span3"> 
			<legend> Keywords 						
				<div class="box-icon">
					<a href="{{ urlFor('me.draft.act.keyword',{"draft":draft.id}) }}" class="btn-setting"><i class="icon-wrench" data-toggle="tooltip" title="Organise the keywords"></i></a>
				</div>
			</legend>
			<div class="controls controls-row">	
				<span class="help-block">Set the groups of keywords to display.</span> 
			</div>				
							
			{% for key,item in groups %}
			<div class="controls controls-row">	
				<label class="checkbox inline">
					<input type="checkbox" value="{{ item.id }}" class="cKeyword"
					{{ (item.id is inOption(cfg.check,false))? "checked=\"checked\""}}> {{ item.attr.name ? item.attr.name : "Default Group" }}
				</label>
			</div>								
			
			{% endfor %}
	</div>
	{% endif %}
	 
			
			<div class="widget-content span3"> 
				<legend> Essay </legend>

							<div class="controls controls-row">
								<div class="controls">
									<label class="checkbox inline"> <input type="checkbox"
										value="1" class="cTaskQuestion"> Show assignment question
									</label>

								</div>
							
							</div>
			</div> </div> 
	</div>
	<div class="modal-footer">
	
		<button class="btn btn-primary" data-dismiss="modal" aria-hidden="true">OK</button>
	</div>
</div>

{% endblock %}



{% block injectCSS %}
{{ parent() }}
<link href="{{ app_base }}/assets/openessayist/css/hljs.css" rel="stylesheet">
<style type="text/css">


.btn-toolbar .title {
  display: block;
  float: left;
  margin-top: -4px; /* Recover part of margin set in child Header nodes */
  margin-left: 10px;
  font-size: 20px;
  font-weight: 200;
  color: #777777;
  text-shadow: 0 1px 0 #ffffff;
}

.icon-heading
{
	vertical-align: middle;
	color: black;
	font-family: sans-serif;Arial;
	font-weight: bolder;
}

p.oe-par {
	/*margin: 1em 0 1em 0;*/
	white-space: inherit;
	/*border-left: 10px solid #D5D5D5;*/
	/*margin-left: -5px;*/
    /*padding-left: 10px;*/
}

/*p.oe-par[data-tag='#+s:i#'] {
	border-left: 10px solid red;
}

p.oe-par[data-tag='#+s:c#'] {
	border-left: 10px solid green;
}

p.oe-par:before
{
	content: "";
}*/

.widget-essay
{
	/*display: table;*/
}

.par-wrapper
{	
	/*display: table-row;*/
	border-bottom: 2px solid white;
    border-top: 2px solid white;
}
.par-tag
{
    display: table-cell;
    width: 18px;
    background-color: #D5D5D5 !important;;
    border-right: 8px solid white;
        text-align: center;
    vertical-align: top;
    cursor: pointer;
    font-size: 11px;
    font-weight: bolder;
    min-width: 50px;
   
}

/*.par-tag[data-tag='#+s:c#']:after
{
	content:"Conclusion";
}*/

.par-tag[data-tag='#+s:i#'] {
	background-color: rgba( 246, 184, 184,0.25) !important;
	color: rgba(246, 184, 184,0.5) !important;;
}

.par-tag[data-tag='#-s:h#'] {
	background-color: rgba(202 ,178 ,214,0.25) !important;;
	color: rgba(202 ,178 ,214,0.5) !important;;
}

.par-tag[data-tag='#+s#'] {
	background-color: rgba(178 ,223 ,138,0.25) !important;;
	color: rgba(178 ,223 ,138,0.5) !important;;
}

.par-tag[data-tag='#+s:c#'] {
	background-color: rgba(31, 120 ,180 ,0.25) !important;;
	color: rgba(31, 120 ,180 ,0.5) !important;;
}

.par-tag[data-tag='#-s:q#'] {
	background-color: rgba(106, 61, 154  ,0.25) !important;;
	color: rgba(106, 61, 154  ,0.5) !important;;
}

.par-tag[data-tag='#-s:t#'] {
	background-color: rgba( 253, 191, 111 ,0.25) !important;;
	color: rgba(253, 191, 111  ,0.5) !important;;
}

.par-tag[data-tag='#+s#'] .icon-heading:before
{
	content:"D";
}
.par-tag[data-tag='#+s:c#'] .icon-heading:before
{
	content:"C";
}

.par-tag[data-tag='#-s:h#'] .icon-heading:before
{
	content:"H";
}

.par-tag[data-tag="#+s:i#"] .icon-heading:before
{
	content:"I";
}

.par-tag[data-tag="#-s:q#"] .icon-heading:before
{
	content:"Q";
}

.par-tag[data-tag="#-s:t#"] .icon-heading:before
{
	content:"T";
}

/*
.par-tag[data-tag='#-s:t#'] {
	background-color: #1F78B4 !important;;
}

.par-tag[data-tag='#-s:h#'] {
	background-color: #A6CEE3 !important;;
}

.par-tag[data-tag='#+s:i#'] {
	background-color: #FB8072 !important;;
}

.par-tag[data-tag='#+s:c#'] {
	background-color: #B3DE69 !important;;
}*/

.par-container
{
	display: table-cell;
}

span.oe-snt {
	white-space: normal;
	display: inline;
}

span.oe-snt[data-tag='#-s:t#']{
	font-weight: bold;
}
        			
span.oe-snt[data-tag='#-s:h#']{
	font-weight: bold;
}

span.oe-snt[data-rank].showmu:before {
	content:	attr(data-rank);
	background-color: #3A87AD;
	border-radius: 9px 9px 9px 9px;
	color: #FFFFFF;
	
	margin-right: 10px;
	padding-left: 9px;
	padding-right: 9px;
	text-shadow: none;
}

span.oe-snt[data-rank].showmu{
	background-color: #D3E3D3 !important;
}

.widget.assignment
{
	display: none;
}

.assignment p{
font-style: italic;
 text-align: justify;
 }

.widget-content legend
{    font-size: 12px;
    font-weight: 800;
    margin-bottom: 10px;
    line-height: 18px;
}

.widget-content.collapse.in
{
	padding: 10px;
}
.widget-content.collapse
{
	padding: 0px;
}

.widget-header[data-target]
{
	cursor: pointer;
}

label.checkbox:before
{
	content: "";
}


.ngram.showKW > .keyword
{
	cursor: pointer;
}

.ngram.showKW .keyword {
	text-shadow: none;
	font-weight: bold;
}

.ngram.showKW {
	border-style: dotted;
	border-width: 1px;
	padding-left: 10px;
	padding-right: 10px;
}

.ngram.category_all.showKW .keyword {
	color: #880000 !important;
}

{% for key,item in groups[1:] %}
.ngram.{{item.id}} .keyword {
}

.ngram.{{item.id}}.showKW {
	border-color: {{ item.attr.color }} !important;
}

.ngram.{{item.id}}.showKW .keyword {
	color: {{ item.attr.color }} !important;
}
{% endfor %}

</style>
{% endblock %}

{% block injectJS %}
	{{ parent() }}
<script src="{{ app_base }}/assets/d3.js/colorbrewer.js"></script>
<script src="{{ app_base }}/assets/highlight.js/highlight.pack.js"></script>
	
{% if mashup in ['keyword','all'] %}
	{% include "javascript/hljs.keywords.js.twig" %}
{% endif %}

	{#<script>
	$(document).ready(function()
	{
		var jqxhr = $.getJSON("{{ urlFor('ajax.keyword.json',{'draft':draft.id}) }}")
			.done(function(data) {
				console.log("OK");
				$('.ngram').click(function(e){
					if ($(this).hasClass("showKW"))
						{
							var kw = $(this).data("keyword"); 
							$(this).popover({
								html: true,
								trigger:'click',
								content:function(a,b,c)
						    	{
							    	return "FGGFGFGFG";
						    	}});
						}
					});
				
				})
			.fail(function(jqxhr,textStatus, error) {
				console.log("ERROR");
				});
	});
	</script>#}
	
	<script>
	$(document).ready(function() {
		var sections =  {
					'#-s:t#': 'Title', 
					'#+s:s#': 'Summary', 
					'#+s:d#': 'Discussion', 
					'#+s:d_i#':'Discussion', 
					'#+s:i#': 'Introduction', 
					'#+s:c#': 'Conclusion', 
					'#-s:q#': 'Assignment',  
					'#+s:p#': 'Preface', 
					'#-s:h#': 'Heading', 
					'#-s:n#': 'Numerics', 
					'#-s:p#': 'Punctuation'					
					};
			          		
			
		sections =  {
				'????':'',
				'#+s:c#': 'Conclusion', 
				'#+s:d_i#':'Discussion', 
				'#+s:d#': 'Discussion', 
				'#+s:s#': 'Summary', 
				'#+s:i#': 'Introduction', 
				'#-s:t#': 'Title', 
				'#+s:p#': 'Preface', 
				'#-s:h#': 'Heading', 
				'#-s:n#': 'Numerics', 
				'#-s:q#': 'Assignment',  
				'#-s:p#': 'Punctuation'					
				};	

		keys=[];
		for (v in sections) keys.push(v);
			
		
		/*//$("label.checkbox").disableSelection();
		$(".par-tag[data-tag]").each(function()
		{
			//console.log(Object.keys(sections));
			var tag = $(this).attr('data-tag');
			var idx = $.inArray(tag,keys);
			idx = (idx==-1)?2:idx;
			var clr = colorbrewer.Paired[11][idx];
			//console.log(tag + " " + idx + " " + clr);
			if (clr)
			{
				 //$(this).attr('style', 'background-color: '+clr+' !important');
				 //$(this).css('opacity', 0.5);
			}
			$(this).attr('title', sections[tag]);
			$(this).find('.attribute').html(sections[tag]);
		});
		
		$(".par-tag").addClass("pop-link").popover({
			animation: true,
			html: true,
			
			content: function(){ 
				return ""
			},
			title: "Discussion",
			trigger: 'click',
			container: 'body'
				});		*/
		/*$("span.keyword").popover({
		animation: true,
		content: function(){ return "ffdfddffddfdf"},
		title: "keyword",
		trigger: 'hover'
			});*/

		/*	$(':not(#anything)').on('click', function (e) {
			    $('.pop-link').each(function () {
			        //the 'is' for buttons that trigger popups
			        //the 'has' for icons and other elements within a button that triggers a popup
			        if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
			            $(this).popover('hide');
			            return;
			        }
			    });
			});
		*/
	{% if mashup in ['keyword','all'] %}		
		// initialise the code highlighting
		$('div.openessay').each(function(i, e) {
			hljs.highlightBlock(e)
		});
	{%  endif %}


	/*{% if mashup in ['keyword','all'] %}		
	
		$('.ngram').click(function(e){
			if ($(this).hasClass("showKW"))
				{
					if ($(this).hasClass("pop-link"))
					{
						$(this).popover('show');
					}
					else
					{
						var kw = $(this).data("keyword"); 
						$(this).addClass("pop-link").popover({
							animation: true,
							html: true,
							title: "Key word",
							trigger:'manual',
							container: 'body',
							content:function(a,b,c)
					    	{
								return ""
					    	}
				    	});
						$(this).popover('show');
					}
				}
			});
		{%  endif %}*/
			
		$('.cTaskQuestion').change(function() {
			var cbox = this;
			var classname = ".widget-content.assignment";
			if (cbox.checked)
				//$(classname).show("fast");
				$(classname).css({'display':'block'});
			else
				$(classname).css({'display':'none'});
		
		});

		$('.cKeyword').change(function() {
			var cbox = this;
			var indicator = cbox.value;
			var classname = ".ngram."+indicator;
			console.log("Group activated :  " + indicator + " (" + cbox.checked + ")");
			
			if (cbox.checked)
				$(classname).addClass("showKW");
			else
				$(classname).removeClass("showKW");
		
		});
		
		$('.cStructure').change(function() {
			var cbox = this;
			var indicators = cbox.value.split(";");
			indicators.forEach(function(elt, idx, arr) {
				var classname = ".par-wrapper[data-tag='" + elt + "']";
				if (cbox.checked)
					//$(classname).show("fast");
					$(classname).css({'display':'block'});
				else
					$(classname).css({'display':'none'});
					//$(classname).hide("fast");
			});

		});
		

		function highlighSentence(event, ui) {
			$("#amount").text(ui.values[0] + " - " + ui.values[1]);
			$('span.oe-snt[data-rank]').each(function() {
				var tt = parseInt($(this).attr('data-rank'));
				var mina = ui.values[0];
				var maxa = ui.values[1];
				
				$(this).removeClass('showmu');
				$(this).removeClass('dimshowmu');
				if (mina <= (tt) && (tt) <= maxa) {
					// if (tt == maxa)
					$(this).addClass('showmu');
					//console.log(mina + " " + maxa);
					
					//console.log("show" + tt);
					// else
					// $(this).addClass('dimshow');

				}
			})
		}	
		
	{% if mashup in ['keyword','all'] %}
		$('.cKeyword').prop('checked', true);	
	{%  endif %}
	{% if mashup in ['sentence','all'] %}
		// set the sentence slider
		smin = 0;
		smax= {{ mashup=='all'? '0' : '15' }};
		$("#slider-range").slider({
			range : true,
			min : 0,
			max : 15,
			values : [ smin, smax ],
			slide : highlighSentence,
			change: function(event, ui) {
					console.log("Sentences Activated.");
					highlighSentence(event, ui);
				}
		});
	{%  endif %}	
	
		$('.cStructure').trigger('change');
	{% if mashup in ['keyword','all'] %}
		$('.cKeyword').trigger('change');
	{%  endif %}{% if mashup in ['sentence','all'] %}
		$('#slider-range').slider("value", {'min':smin});
	{%  endif %}{% if mashup in ['all'] %}
		$('.cTaskQuestion').trigger('change');
		//$('#slider-range').trigger('change');
	{%  endif %}
	});
	</script>

{% endblock %}
