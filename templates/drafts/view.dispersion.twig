{% extends "site.twig" %} 

{% block title %}{{ task.name }} v{{ draft.version }} - Keywords Dispersion{% endblock %} 
{% block subheader %}Your Draft : Key Words Dispersion{% endblock %} 


{% block bccontainer %}		
	{% include "widgets/breadcrumb.task.twig" %}
{% endblock %}

{% block navsubheader %}
	{% include "widgets/navbar.drafts.twig" with {'navsrc': 'me.draft.view.dispersion'} %}
{% endblock %}

{% block content %}

<div class="row-fluid"><div class="span12">

<div class="widget">
	<div class="widget-header" data-toggle="collapse" data-target="#demo">
		<h2>Key Words Dispersion</h2>
	</div>
	
	<div class="widget-toolbar">
		<div class="btn-toolbar" id="options" role="toolbar" aria-controls="container">
			<div class="btn-group option-set"  data-toggle="buttons-radio" data-option-key="sortBy">
				<span class="btn-label">Zoom by axis : </span>
				<button title="Zoom by essay structure" class="btn-setting btn  active" data-option-value="x">Essay</button>
				<button title="Zoom by key word" class="btn-setting btn " data-option-value="y">Key Words</button>
				<button title="Zoom by both side" class="btn-setting btn " data-option-value="xy">Both</button>
			</div>
			<button id="zoom-reset" title="Reset Zoom" class="btn ">Reset Zoom</button>
			<div id="legend_bullet" class="btn-group" style="white-space: normal;" data-toggle="buttons-checkbox">
			</div>
		</div>
	</div>
	
	
	<div class="widget-content" style="padding: 0px;">
		<div id="container" style="height: 600px;margin: 0 auto">
			
		</div>
	</div>
</div>
</div></div>


<div class="row-fluid">

<div class="span12"><div class="widget">
	<div class="widget-header">
		<h2>Word Count (Data Table)</h2>
	</div>
	<div class="widget-content">
	
	<table id="data-table" class="table table-striped  table-hover table-condensed">
	<thead>
		<tr>
			<th>Group</th>
			<th>Rank</th>
			<th>Keyword</th>
			{% for i in 0..9 %}
			<th>{{ (i+1)*10 }}%</th>
			{% endfor %}
			<th>Total</th>
		</tr>	
	</thead>
	<tbody>
		{% for item in table %}
		<tr>
			<td>{{ item.group }}</td>
			<td>{{ item.index }}</td>
			<td>{{ item.keyword }}</td>
			{% set tot = 0 %}
			{% for i in 0..9 %}
				{% set tot = tot + item.data[i] %}
			<td>{{ item.data[i]?:'' }}</td>
			{% endfor %}
			<th>{{ tot }}</th>
		</tr>
		{% endfor %}
	</tbody>
	<tfoot></tfoot>
	<caption>Occurrence of key words & key phrases throughout the essay (per 10% chunks)</caption>
	</table>
	</div>
</div></div>

</div>

{% endblock %}

{% block injectJS %}
	{{ parent() }}
<script src="{{ app_base }}/assets/d3.js/colorbrewer.js"></script>
<script src="{{ app_base }}/assets/highcharts/js/highcharts.js"></script>
<script src="{{ app_base }}/assets/highcharts/js/modules/exporting.js"></script>
<script src="{{ app_base }}/assets/jquery.dataTables/js/jquery.dataTables.js"></script>
<script src="{{ app_base }}/assets/jquery.dataTables/js/plugin.dataTableExt.js"></script>

<script type="text/javascript">
/*
 * TO DO: DataTable internal function _fnBindAction needs to be changed to that one
 * 	for better accessibility (keep focus on clicked header, intercept keydown rather than keypress)
 */
$.fn.DataTable._fnBindAction = function( n, oData, fn )
{
	$(n)
		.bind( 'click.DT', oData, function (e) {
				//n.blur(); // Remove focus outline for mouse users
				fn(e);
			} )
		.bind( 'keydown.DT', oData, function (e){
			if ( e.which === 13 ) {
				fn(e);
			} } )
		.bind( 'selectstart.DT', function () {
			/* Take the brutal approach to cancelling text selection */
			return false;
			} );
};

$(document).ready(function() {
	var chart = null;
	var chartOptions = null;



	var $series = {{ series|json_encode|raw }};

	$('#data-table').dataTable( {
		"bPaginate": false,
        "bLengthChange": false,
        "bFilter": true,
        "bSort": true,
        "bInfo": false,
        "bAutoWidth": true,
        "aaSorting": [[ 1, "asc" ]],
    	"aoColumnDefs": [
		]
	} );
	$('#data-table tbody').removeAttr("role").removeAttr("aria-live").removeAttr("aria-relevant");
	

	$('.btn-setting').click(function(){
		var data = $(this).data('option-value');
		var zoomtype = chartOptions.chart.zoomType;
		if (data==zoomtype) return;

		chartOptions.chart.zoomType = data;
		chart = new Highcharts.Chart(chartOptions);;
	});

	$('#zoom-reset').click(function() {
	    chart.zoomOut();
	});

	sections =  {
			'????':'',
			'#+s:c#': 'Conclusion', 
			'#+s:d_i#':'Discussion', 
			'#+s:d#': 'Discussion', 
			'#+s:s#': 'Summary', 
			'#+s:i#': 'Introduction', 
			'#-s:t#': 'Title', 
			'#+s:p#': 'Preface', 
			'#-s:h#': 'Heading', 
			'#-s:n#': 'Numerics', 
			'#-s:q#': 'Assignment',  
			'#-s:p#': 'Punctuation'					
			};
	
	
	$('#resizer').resizable({
		ghost: false,
		animate: false,
	    // On resize, set the chart size to that of the 
	    // resizer minus padding. If your chart has a lot of data or other
	    // content, the redrawing might be slow. In that case, we recommend 
	    // that you use the 'stop' event instead of 'resize'.
	    resize: function() {
	        if (chart) chart.setSize(
	            this.offsetWidth - 20, 
	            this.offsetHeight - 20,
	            false
	        );
	    }
	});

	function hex2rgba(x,a) {
		  var r=x.replace('#','').match(/../g),g=[],i;
		  for(i in r){g.push(parseInt(r[i],16));}g.push(a);
		  return 'rgba('+g.join()+')';
		}
	
	function getColor(tag)
	{
		var idx = $.inArray(tag,Object.keys(sections));
		idx = (idx==-1)?2:idx;
		var clr = colorbrewer.Paired[11][idx];
		var clr2 = hex2rgba(clr,'0.2');
		return clr2;				
	}

	var tt = getColor('#+s:i#');
	var myCats = {{ categories|json_encode|raw }};

	chartOptions = {
		credits: {
            enabled: false
        },
        legend: {
			enabled: false,
            itemStyle: {
                color: '#000000',
            }},
        exporting: {
            enabled: false,
            sourceWidth: 1175 ,
            sourceHeight: 825,
        },
		chart: {
	    	backgroundColor: "#fbfbf8",			    
			renderTo: 'container',
			type: 'scatter',
			zoomType: 'x',
			reflow: true,
			resetZoomButton: {
		        theme: {
		            display: 'none'
		        }
		    }
		},
		title: {
			text: 'Occurrence of key words & key phrases throughout the essay'
		},
		tooltip: {
            followPointer: true,
            followTouchMove: true,
            hideDelay: 100,
			
			formatter: function() {
				return "<b>" +  myCats[this.point.y] + "</b><br>" + this.series.name;
	                }
	    },
	    xAxis: [{ // master axis
			min: 0,
			
	    	title: {
		    	enabled: false,
		        text: 'word count'
			},
			labels: {
				enabled: false
			},
			minRange: 200,
			startOnTick: false,
			endOnTick: false,
			showLastLabel: true,
			plotBands: [
				{% for key,band in structure %}
					{
						from: {{ band.from }},
						to: {{ band.to }},
						color: getColor('{{ band.tag }}'),
						 thickness: '5%'
					},
				{% endfor %}
				]
		}/*,{	// slave axis
			linkedTo:0 ,			
			minRange: 50,
			opposite: false,
	    	title: {
		    	enabled: false,
		        text: 'Essay Structure'
			},
			//tickPositions: {{ ticks|json_encode|raw }},
			labels: {
				enabled: false,
				 staggerLines: 1,
				 rotation: -90,
				formatter: function() {
					var gg = {{ tags|json_encode|raw }} 
					return gg[this.value];},
				},
		}*/],
		yAxis:{ minRange: 10,
			title: {
				enabled: false,
				text: null
			},
			min:0,
			
			startOnTick: true,
			endOnTick: true,
			tickInterval: 1,
			minorTickInterval: 1,
			type: 'category',
			categories:  myCats,
			
			
		},
		plotOptions: {
			series: {
				stickyTracking: false
			},
			scatter: {
				marker: {
					symbol: 'diamond',
					radius: 5,
					states: {
						hover: {
							enabled: true,
							lineColor: 'rgb(100,100,100)'
						}
					}
				},
				states: {
					hover: {
						marker: {
							enabled: false
						}
					}
				}
			}
		},
		series: $series
			
	};

	chart = new Highcharts.Chart(chartOptions);

	$.each($series,function(index,item){
		var that = item;
		$('#legend_bullet').append(
				$('<button/>', {
				    type: 'button',
				    title: 'Show or hide key words from this group',
				    text: item.name,
				    id: "legend-tag"+index,
				    'data-tag': item.tag,
				    'class': 'btn active',
				})
				.attr("role","checkbox")
				.attr("aria-checked","true")
				.prepend($('<div/>')
					.addClass('legendcolor')
					.attr("aria-hidden","true")
					.css('background-color',item.color)
				).click(function() {
					var chart = $('#container').highcharts();
					var series = chart.series[index];
					$(this).attr("aria-checked",!series.visible);
			        if (series.visible) {
			            series.hide();
			        } else {
			            series.show();
			        }
				})
		);
	});
	
});

</script>
{% endblock %}

{% block injectCSS %}
	{{ parent() }}
<style type="text/css">
			
button .legendcolor
{
    background-color: white;
    float: left;
    height: 14px;
    margin-right: 5px;
    margin-top: 2px;
    width: 20px;
}
table.table thead .sorting,
table.table thead .sorting_asc,
table.table thead .sorting_desc,
table.table thead .sorting_asc_disabled,
table.table thead .sorting_desc_disabled {
    cursor: pointer;
    *cursor: hand;
}


table.table thead .sorting:after { font-family: FontAwesome; content: "   ";}
table.table thead .sorting_asc:after { font-family: FontAwesome; content: "   ";}
table.table thead .sorting_desc:after { font-family: FontAwesome; content: "   ";}

table.table thead .sorting_asc_disabled {  }
table.table thead .sorting_desc_disabled { }	
	
</style>
{% endblock %}