{% extends "site.twig" %} 

{% block title %}Draft - Visualisation (Adjacency Matrix){% endblock %} 


{% block bccontainer %}		
	{% include "widgets/breadcrumb.panel.twig" %}
	    <li><div class="btn-group">
    	<a href="{{ urlFor('me.drafts',{"idt":task.id}) }}" class="btn btn-small" >
    		<i class="icon-pencil"></i><span class="hidden-phone hidden-tablet"> {{ task.name }}</span></a>
	</div></li>
	<li><div class="btn-group">
    	<a href="{{ urlFor('me.draft.show',{"draft":draft.id}) }}" class="btn btn-small" >Overview</a>
	   	<a href="{{ urlFor('me.draft.keywords',{"draft":draft.id}) }}" class="btn btn-small" >Keywords</a>
    	<a href="{{ urlFor('me.draft.sentence',{"draft":draft.id}) }}" class="btn btn-small" >Sentences</a>
    	<a href="{{ urlFor('me.draft.stats',{"draft":draft.id}) }}" class="btn btn-small" >Stats</a>
   	</div></li>
	<li><div class="btn-group">
		<a class="btn btn-small dropdown-toggle" data-toggle="dropdown" href="#">Views <span class="caret"></span></a>
    	<ul class="dropdown-menu">
			<li><a href="{{ urlFor('me.draft.view.dispersion',{"draft":draft.id}) }}">Keyword Dispersion</a>
			<li class="divider"></li>
    	  	<li><a href="{{ urlFor('me.draft.view.graph',{"draft":draft.id,"graph":"graphke"}) }}">Keyword Graph</a>
    	  	<li><a href="{{ urlFor('me.draft.view.graph',{"draft":draft.id,"graph":"graphse"}) }}">Sentence Graph</a>
			<li class="divider"></li>
			<li><a href="{{ urlFor('me.draft.view.matrix',{"draft":draft.id}) }}">Sentence Co-occ Matrix</a>
		</ul></div>
    </li>    	
{% endblock %}

{% block content %}

{#
<ul class="breadcrumb">
	<li><div class="btn-group">
	{% for key,item in views %}
		{% if key == view %}
			<button class="btn btn-small active disabled">{{ item.name }}</button>
		{% else %}
			<a href="{{ urlFor('me.draft.view.graph',{"draft":draft.id,"graph":key}) }}" class="btn btn-small" >{{ item.name }}</a>
		{% endif %}
    {% endfor %}
	   	
    </div></li>
</ul>#}

<div class="row-fluid"><div class="span12">

	<div class="widget">
		<div class="widget-header" data-toggle="collapse" data-target="#demo">
			<h3> Display Options </h3>
			<div class="box-icon">
				<a class="btn-setting" href="#"><i class="icon-chevron-down"></i></a>
			</div>
		</div>
		<select id="order">
			<option value="name">by Name</option>
			<option value="count">by Frequency</option>
			<option value="group">by Cluster</option>
		</select>
		<div class="widget-content" id='svg-container'></div>
		</div>

</div></div>

{% endblock %}

{% block injectJS %}
<script src="/assets/jquery-ui-1.9.2.custom/js/jquery.blockUI.js"></script>
<script src="/assets/d3.js/d3.v3.js"></script>
<script type="text/javascript">
$(document).ready(function(){
	//$.blockUI.defaults.baseZ = 1100; 
	//$(document).ajaxStart($.blockUI).ajaxStop($.unblockUI);
	var margin = {top: 80, right: 0, bottom: 10, left: 80},
	width = 720,
	height = 720;

var x = d3.scale.ordinal().rangeBands([0, width]),
	z = d3.scale.linear().domain([0, 1]).clamp(true),
	c = d3.scale.category10().domain(d3.range(10));

var svg = d3.select("#svg-container").append("svg:svg")
	.attr("width", width + margin.left + margin.right)
	.attr("height", height + margin.top + margin.bottom)
	.style("margin-left", "0px")
	.append("g")
	.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var matrix = [];

var categories = {{ category|json_encode|raw  }};
var colorcat = {{ colorcat|json_encode|raw  }};
var sentences = {{ sentence|json_encode|raw  }};

$.blockUI({ message: '<div class="ajax alert alert-info"><img src="/assets/openessayist/img/ajax-loader.gif" /> loading and display data ...</div>' }); 
var xhr = d3.json("{{ urlFor('ajax.graph.json',{"draft":draft.id,"graph":"graphse"}) }}")
	.on("progress", function() { console.log("progress", d3.event.loaded); })
    .on("error", function(error) { console.log("failure!", error);$.unblockUI(); })
    .on("load", onloaded)
    .get();

function onloaded(graph) {

	
	var nodes = graph.nodes;
	var links = graph.links;
	var n = nodes.length;
		
	// Compute index per node.
	nodes.forEach(function(node, i) {
		//console.log(node);
		node.index = i;
		node.count = 0;
		node.group = colorcat[categories[node.id]];
		matrix[i] = d3.range(n).map(function(j) { return {x: j, y: i, z: 0}; });
	});

		
	//Convert links to matrix; count character occurrences.
	links.forEach(function(link) {
		//console.log(link);
		matrix[link.source][link.target].w = link.weight+.3;
		matrix[link.target][link.source].w = link.weight+.3;
			
		matrix[link.source][link.target].z += 1;//link.value;
		matrix[link.target][link.source].z += 1;//link.value;
		// diagonal cells are empty
		//matrix[link.source][link.source].z += 1;//link.value;
		//matrix[link.target][link.target].z += 1;//link.value;
		
		nodes[link.source].count += 1;//link.value;
		nodes[link.target].count += 1;//link.value;
	});

	//console.log(JSON.stringify(matrix));
	
	//Precompute the orders.
	var orders = {
			name: d3.range(n).sort(function(a, b) { return d3.ascending(nodes[a].id, nodes[b].id); }),
			count: d3.range(n).sort(function(a, b) { return nodes[b].count - nodes[a].count; }),
			group: d3.range(n).sort(function(a, b) { return nodes[b].group - nodes[a].group; })
	};

	// The default sort order.
	x.domain(orders.name);
		
	svg.append("rect")
		.attr("class", "background")
		.attr("width", width)
		.attr("height", height);

	var row = svg.selectAll(".row")
		.data(matrix)
		.enter().append("g")
			.attr("class", "row")
			.attr("transform", function(d, i) { return "translate(0," + x(i) + ")"; })
			.each(row);
		
	row.append("line")
		.attr("x2", width);

	row.append("text")
		.attr("x", -6)
		.attr("y", x.rangeBand() / 2)
		.attr("dy", ".32em")
		.attr("text-anchor", "end")
		.text(function(d, i) { return nodes[i].id + " (" + nodes[i].group + ")"; });
		
	var column = svg.selectAll(".column")
		.data(matrix)
		.enter().append("g")
			.attr("class", "column")
			.attr("transform", function(d, i) { return "translate(" + x(i) + ")rotate(-90)"; });
		
	column.append("line")
		.attr("x1", -width);
		
	column.append("text")
		.attr("x", 6)
		.attr("y", x.rangeBand() / 2)
		.attr("dy", ".32em")
		.attr("text-anchor", "start")
		.text(function(d, i) { return nodes[i].id + " (" + nodes[i].group + ")"; });

	$.unblockUI();

	function row(row) {
		var cell = d3.select(this).selectAll(".cell")
			.data(row.filter(function(d){ return d.z; }))
		  .enter().append("rect")
		  	.attr("class", "cell")
		  	.attr("x", function(d) { return d.x==d.y? x(d.x)+2 : x(d.x); })
		  	.attr("y", function(d) { return d.x==d.y? 2 : 0; })
		  	.attr("width", function(d) { return d.x==d.y? x.rangeBand()-4 : x.rangeBand(); })
		  	.attr("height", function(d) { return d.x==d.y? x.rangeBand()-4 : x.rangeBand(); })
		  	.style("fill-opacity", function(d) { return z(d.w); })
		  	//.style("fill-opacity", function(d) { return d.w ? d.w : 1; })
		  	.style("fill", function(d) { return nodes[d.x].group == nodes[d.y].group ? c(nodes[d.x].group) : null; })
		  	//.style("fill", function(d) { return c(nodes[d.y].group); })
		  	.style("stroke-width",function(d,n) { return d.x==d.y? "2px" : null; })
		  	.style("stroke",function(d,n) { return d.x==d.y? c(nodes[d.x].group) : null; })
		  .on("mouseover", mouseover)
		  .on("mouseout", mouseout)
		  .each(function(d,i){
		        $(this).popover({
			        title:"adjacency", 
			        container:"body",
			        trigger: 'hover',
			        content:sentences[nodes[d.x].id] + " <br> " + sentences[nodes[d.y].id] , 
				  });
		    });
	}

	function mouseover(p) {
		d3.selectAll(".row text").classed("active", function(d, i) { return i == p.y; });
		d3.selectAll(".column text").classed("active", function(d, i) { return i == p.x; });
		/*console.log($(this));
		$(this).popover({
			animation: true,
			content: function(){ return "ffdfddffddfdf"},
			title: "keyword",
			trigger: 'hover'
				});
		$(this).popover('show');*/
	}
		
	function mouseout(p) {
		d3.selectAll("text").classed("active", false);

	}
		
	d3.select("#order").on("change", function() {
		clearTimeout(timeout);
		order(this.value);
	});

	function order(value) {
		x.domain(orders[value]);
		var t = svg.transition().duration(2500);

		t.selectAll(".row")
			.delay(function(d, i) { return x(i) * 4; })
			.attr("transform", function(d, i) { return "translate(0," + x(i) + ")"; })
		  .selectAll(".cell")
		    .delay(function(d) { return x(d.x) * 4; })
		    .attr("x", function(d) { return d.x==d.y? x(d.x)+2 : x(d.x); });
		
		t.selectAll(".column")
		    .delay(function(d, i) { return x(i) * 4; })
		    .attr("transform", function(d, i) { return "translate(" + x(i) + ")rotate(-90)"; });
	}

	var timeout = setTimeout(function() {
			order("group");
			d3.select("#order").property("selectedIndex", 2).node().focus();
		}, 5000);

	
};


	
});
</script>
{% endblock %}

{% block injectCSS %}
<style type="text/css">
.ajax.alert
{
	margin-bottom: 0px;
	font-weight: bolder;
}
.background {
  fill: #eee;
}

line {
  stroke: #fff;
}

text.active {
  fill: red;
  font-weight: bold;
}
    </style>
{% endblock %}