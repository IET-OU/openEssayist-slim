{% extends "site.twig" %} 
{% import "widgets/ngram.macro.twig" as ngram %}

{% block title %}{{ task.name }} v{{ draft.version }} - Organise Key Words{% endblock %} 
{% block subheader %}Your Draft : Organise the Key Words{% endblock %} 

{% block navsubheader %}
	{% include "widgets/navbar.drafts.twig" with {'navsrc': 'me.draft.act.keyword'} %}
{% endblock %}


{% block injectCSS %}
	{{ parent() }}
<link href="{{ app_base }}/assets/jquery.minicolors/jquery.minicolors.css" rel="stylesheet">

 <style>
.btn-ngram { cursor: move;}
.sortable {  list-style-type: none; margin: 0; padding: 0; min-height: 25px; }
.sortable li {float:left; margin: 2px 3px;}

.sortable li.ui-state-highlight:empty
{
	
	margin-top: 4px;
	height: 20px;
    width: 80px;
}

.input-prepend.input-fullwidth, .input-append.input-fullwidth  {
    position: relative;
    display: block;
}

.input-prepend.input-fullwidth .add-on, .input-append.input-fullwidth .add-on {
    
}
.input-prepend.input-fullwidth .input-wrapper, .input-append.input-fullwidth .input-wrapper {
    position: absolute;
    display: block;
    left: 26px;
    right: 26px;
    top: 0;
    bottom: 0;
}
.input-fullwidth .input-wrapper input {
  
   
}

h3 > .cat_color
{
    border: 1px solid #D5D5D5;
    margin-right: 5px;
    padding-left: 10px;
    padding-right: 10px;
    white-space: inherit;
}

 .ui-autocomplete {
max-height: 200px;
overflow-y: auto;
/* prevent horizontal scrollbar */
overflow-x: hidden;
}
/* IE 6 doesn't support max-height
* we use height instead, but this forces the menu to always be this tall
*/
* html .ui-autocomplete {
height: 100px;
}

.ui-pnotify.stack-bar-bottom {
			margin-left: 15%;
			right: 0;
			bottom: 0;
			top: auto;
			left: auto;
		}
</style>
 
{#<style>

.ajax.alert
{
	margin-bottom: 0px;
	font-weight: bolder;
}


ul#category_all
{
	min-height: 200px;
	max-height: 200px;
	overflow-y: auto;
}



</style>#}
{% endblock %}


{% block bccontainer %}		
	{% include "widgets/breadcrumb.task.twig" %}
{% endblock %}



{% block content %}


{#
<div class="row-fluid">
<div class="widget">
<div class="widget-header"><h3>Add you own key words ...</h3></div>
			 	
			<div class="widget-content">
				<div class="input-append input-fullwidth00">
					<div class="input-wrapper">
						<input class="" id="tags"  type="text" placeholder="filter the list">
						
					</div>
	
				</div>
				<div id="project-id"></div>
	<p id="project-description"></p>
			</div>
</div></div>
#}

{% set lkw = (groups['category_all'] is defined)? groups['category_all']['keywords'] : keywords   %}
<div class="row-fluid"><div class="span12">
	<div class="widget">
		<div class="widget-header"><h3>All Key Words ({{ lkw|length }})</h3></div>
		<div class="widget-content">
		<ul class="sortable" id="category_all">

		{% if groups.category_all is defined %}
		
			{% for key2,item2 in groups.category_all.keywords  %}
			<li id="{{ item2 }}">{{ ngram.toBtn(keywords[item2],false) }}</li>
			{% endfor %}
			{% else %}
		
			{% for key,item in keywords %}
			<li id="{{ key }}">{{ ngram.toBtn(item,false) }}</li>
			{% endfor %}
		{% endif %}
		
		</ul>	


		
		
		</div>
	</div>
</div></div>

<div class="row-fluid"><div class="span12">
	<div class="widget">
		<div class="widget-header"><h3>Your Groups ({{ groups|length }})</h3>
	</div>
	{% if task.isopen %}
	<div class="widget-toolbar">
		<div class="btn-toolbar">    
    		<button id="catg-Save" class="btn btn-small btn-primary disabled">Save</button>
    		<button id="catg-Reset" data-toggle="modal" data-target="#modal-reset" class="btn btn-small ">Reset</button>
    		<button id="catg-New" {{ (groups|length == 10)? "disabled" }} class="btn btn-small">New Group...</button>
    	</div>
	</div>
	{% endif %}	
		<div class="widget-content" id="widget-content-cats">
			
			<div class="row-fluid">
			{% for key,item in groups[1:] %}
			
				{% if loop.index0!=0 and loop.index0%3 == 0 %}
			</div>
			<div class="row-fluid">
				{% endif %}
				<div class="span4" id="cat_{{ loop.index0 }}">
					
					<div class="widget-header"><h3>
								<span class="cat_color" style="background-color: {{ item.attr.color }};"></span>
								<span class="cat_name">{{ item.attr.name }}</span></h3>
							{% if task.isopen %}
							<div class="box-icon">
							<a href="#" class="btn-setting" title="Edit the group properties" data-toggle="modal" data-target="#dlgSetting" data-category="cat_{{ loop.index0 }}"><i class="icon-wrench"></i></a>
							</div>
							{% endif %}
						</div>
					<div class="widget-content" id="">
					<ul class="sortable" id="{{ key }}"> 
						{% for key2,item2 in item.keywords  %}
								<li class="" id="{{ item2 }}">{{ ngram.toBtn(keywords[item2],false) }}</li>
							{% endfor %}
					</ul>
					</div>
					<div class="widget-content info hide" >
							<input class="grp_name" type="text" placeholder="Type something..." value="{{ item.attr.name }}">
							<input class="grp_color" type="text" value="{{ item.attr.color }}">
							<textarea class="grp_desc" placeholder="Type something...">{{ item.attr.desc }}</textarea>
					</div>
				</div>
			{% else %}
				
			{% endfor %}
		
			
			
		</div>
	</div></div>
</div></div>


<!-- Template for Keyword group -->
<div class="span4 hide" id="cat_template">
	<div class="widget-header"><h3><span class="cat_color"></span><span class="cat_name"></span></h3>
		<div class="box-icon">
			<a href="#" class="btn-setting" data-toggle="modal" data-target="#dlgSetting" data-category="ref_template"><i class="icon-wrench"></i></a>
		</div>
		</div>
	<div class="widget-content" id="">
		<ul class="nonsortable" id="sort_template" style="min-height: 50px">
		</ul>
	</div>
	<div class="widget-content info hide" id="">
		<input class="grp_name" type="text" placeholder="Type something...">
		<input class="grp_color" type="text" value="#3b98bd">
		<textarea class="grp_desc" placeholder="Type something..."></textarea>
	</div>
</div>

<!-- Modal -->
<div id="dlgSetting" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-hidden="true"><i class="icon-remove"></i></button>
		<h3 id="myModalLabel">Group Properties</h3>
	</div>
	<div class="modal-body">
	    <form>
	    	<div class=" controls-row">
		    	<div class="controls ">
	    			<label>Name</label>
	    			<input id="dlg_name" type="text" placeholder="Type something...">
	    		</div>
	    		<div class="controls ">
	    			<label>Color</label>
	    			<input class="minicolors" id="dlg_color" type="text" value="#3b98bd">
	    		</div>
 		<div class=" controls">
		    	<label>Description</label>
    			<textarea id="dlg_desc" class="input-block-level" placeholder="Type something..." rows="5" style="resize: vertical;"></textarea>
    		</div>
    		<input type="hidden" id="dlg_category" value="">
	    		</div>
   		</form>
	</div>
	<div class="modal-footer">
		<button id="dlg_close" class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
		<button id="dlg_save" class="btn btn-primary" data-dismiss="modal">OK</button>
	</div>
</div>

    <div id="modal-reset" tabindex="-1" class="modal hide fade" role="dialog" data-keyboard="true" >
    <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h3>Reset Groups</h3>
    </div>
    <div class="modal-body">
    	<p>This will clear up all your groups, restoring the key words to their "default" grouping.
    	 This operation cannot be undone.</p>
       	<p><b>Are you sure you want to reset the groups?</b></p>
    	</div>
    <div class="modal-footer">
    <button class="btn  btn-primary" data-dismiss="modal" aria-hidden="true">Cancel</button>
    <button id="catg-Reset-Confirm" class="btn btn-danger" data-dismiss="modal" aria-hidden="true">Reset</button>
    
    </div>
    </div>

{% endblock %}


{% block injectJS %}
	{{ parent() }}
<script src="{{ app_base }}/assets/jquery-ui-1.9.2.custom/js/jquery.blockUI.js"></script>
<script src="{{ app_base }}/assets/d3.js/d3.v3.min.js"></script>
<script src="{{ app_base }}/assets/jquery.minicolors/jquery.minicolors.js"></script>

{#<script>
$(document).ready(function() {
	var lemmas = {{ lemmas|json_encode|raw  }};
	
	function split( val ) {
		 return val.split( /,\s*/ );
	};

	function extractLast( term ) {
		 return split( term ).pop();
	};

	$( "#tags" )
		
		// Define and attach the autocomplete UI
		.autocomplete({
			minLength: 0,
			source: lemmas,
			focus: function( event, ui ) {
				$( "#tags" ).val( ui.item.label );
				return false;
				},
			select: function( event, ui ) {
				 $( "#tags" ).val( "" );
				 $( "#project-id" ).append("{{ ngram.toBtnString('ui.item',false,true) }}");
				 $( "#project-description" ).html( ui.item.desc );
				return false;
				}
			}) .data( "ui-autocomplete" )._renderItem = function( ul, item ) {
				
				return $( "<li>" )
				.append("{{ ngram.toBtnString('item',false,true) }}")
				.appendTo( ul );
				};;		 

	 $('input#filter').keyup(function(){
	        
	        var searchText = $(this).val().toLowerCase(),
	            $allListElements = $('ul#category_all > li'),
	            $matchingListElements = $allListElements.filter(function(i, el){
	                return $(el).text().indexOf(searchText) !== -1;
	            });
	        
	        $allListElements.hide();
	        $matchingListElements.show();
	        
	    });
});
</script>
#}

<script>
$(document).ready(function() {
	var is_dirty = false;
	var stack_bar_bottom = {"dir1": "up", "dir2": "right", "spacing1": 0, "spacing2": 0};
	$.pnotify.defaults.delay = 1000;
	var color = d3.scale.category10().range(); 
	color = color.slice({{ groups|length ? groups|length-1:0  }});
	console.log(color);

	{% if task.isopen %}
		var saveDialog = function(e) {
	    	var myBookId = $('#dlg_category').val() ;
	        console.log("save > " + myBookId);
	        var tp = $("#"+ myBookId);
	        if (tp)
	        {
	            var name = $('#dlg_name').val();
	            var color = $('#dlg_color').val();
	            var desc = $('#dlg_desc').val();
	            console.log(name + " " + color + " " + desc );
				g = tp.find('.grp_name');
				if (g) g.val(name); 
				g = tp.find('.grp_color');
				if (g) g.val(color); 
				g = tp.find('.grp_desc');
				if (g) g.val(desc); 

				g = tp.find('h3 > .cat_name');
				if (g) g.text(name);
				g = tp.find('h3 > .cat_color');
				if (g) g.css('background-color',color);
				is_dirty = true;	
				$("#catg-Save").removeClass("disabled");
			}
	    };

	var bindDialog = function(e) {
		var myBookId = $(this).data('category');
		console.log(myBookId);
		var tp = $("#"+ myBookId);
		if (tp)
		{
			g = tp.find('.grp_name');
			if (g) $('#dlg_name').val(g.val()); 
			g = tp.find('.grp_desc');
			if (g) $('#dlg_desc').val(g.val()); 

			g = tp.find('.grp_color');
			if (g) $('#dlg_dlg').val(g.val()); 
			$('#dlg_color').minicolors('value',g.val());
			$('#dlg_category').val(myBookId); 
						
		}
		//$('#dlg_color').val(dd);
		//$('#dlg_color').minicolors('value',dd);
	};

	var updateSortables = function()
	{
		console.log("test");
		$( ".sortable" ).sortable({
			placeholder : "ui-state-highlight",
			connectWith : ".sortable",
			update : function(event, ui) {
				var order = $(this).sortable('toArray');
				order=order.toString();
				console.log(this.id + " " + order);
				is_dirty = true;
				$("#catg-Save").removeClass("disabled");
			}
		}).disableSelection();

		$(".btn-setting").unbind('click');
		$(".btn-setting").click(bindDialog);
		
	}

	var resetCategory = function(e) {

		is_dirty = false;	
		$('body').modalmanager('loading'); 
		//
		$.ajax({
			type : "POST",
			method: "post",
			url : "{{ urlFor('profile.reset.keyword',{"idt":task.id}) }}", // URL and function to call
			data : {	
					"user": "{{  auth.user.id }}",
					"task" : "{{ task.id }}", 
					"draft": "{{ draft.id }}"
			}, 
			//contentType : "application/json; charset=utf-8",
			//processData : true,
			dataType : "json",
			success : function(msg, status) {
				// Set Response outcome
				console.log(msg);
				location.reload();
			},
			error : function(xhr, msg, e) {
				// this should only fire if the ajax call did not happen or
				// there was an unhandled exception
				console.log(msg);
				$('body').modalmanager('loading'); 
			}
		});		
		
	};

	/**
		Save the groups' content and definition
	*/
	var saveCategory = function(e) {
		if ($(this).hasClass('disabled')) return;
	
		//$.blockUI({ message: '<div class="ajax alert alert-info"><img src="/assets/openessayist/img/ajax-loader.gif" /> Saving User Data ...</div>' });
		$('body').modalmanager('loading'); 
		var json = {};
		
		var allcats = $('.sortable');
		allcats.each(function(index) {
			var setting = $(this).sortable('toArray');
			var id = $(this).attr('id');
			json[id] = { 
				'keywords': setting,
				'id': id
			};
		});

		holder = $('#widget-content-cats');
		var allcats = holder.find(".span4");
		allcats.each(function(index)
		{
			id = $(this).find('.sortable').attr('id');
			nm = $(this).find('.grp_name').val();
			desc = $(this).find('.grp_desc').val();
			clr = $(this).find('.grp_color').val();
			json[id].attr = {
					'name' : nm,
					'desc' : desc,
					'color': clr 
				};
		});
		console.log(json);
		$.ajax({
			type : "POST",
			method: "post",
			url : "{{ urlFor('profile.save.keyword',{"idt":task.id}) }}", // URL and function to call
			data : {	
					"user": "{{  auth.user.id }}",
					"task" : "{{ task.id }}", 
					"draft": "{{ draft.id }}",
					"data" : json
			}, 
			//contentType : "application/json; charset=utf-8",
			//processData : true,
			dataType : "json",
			success : function(msg, status) {
				// Set Response outcome
				console.log(msg);
				openEssayist.log4j("{{ constant('TutorController::ACTION_KEYWORD_GROUP') }}",msg);
				is_dirty = false;
				$("#catg-Save").addClass("disabled");
				 opts = {
						title: 'Hint',
						text: "The content of your groups have been saved.<br>Why don't you check the effect of the changes by going to the main essay?" + 
							"<p style='margin-top:6px;'><a class='btn ' href='{{ urlFor('me.draft.showext',{'draft':draft.id,'cmd':'all'}) }}'><i class='icon-large icon-desktop'></i> Essay</a></p>",
						addclass: "stack-bottomright",
				        stack: $.pnotify.defaults.openessayist, 
				        hide: false,
				        sticker: true, 
				        type: 'success',
				        icon: 'icon-large  icon-comments'
					}; 
				
				$.pnotify(opts);
				$('body').modalmanager('loading'); 
			},
			error : function(xhr, msg, e) {
				// this should only fire if the ajax call did not happen or
				// there was an unhandled exception
				console.log(msg);
				$('body').modalmanager('loading'); 
			}
		});		

	};
	

	var onClickNew =  function(e) {
		console.log("new group created ...");

		var holder = $('#widget-content-cats > .row-fluid :last');
		var allcats = holder.find(".span4");
		var nCats = allcats.length;
	
		var n = holder.children().length;
		
		var template = $('#cat_template').clone();

		var title = template.find("div.widget-header > h3 > .cat_name  ");
		if (title) title.text("Group " + (nCats+1));
		template.removeClass('hide');
		template.removeAttr('id');

		var info = template.find('.nonsortable');
		if (info)
			{	info.removeClass('nonsortable');
				info.addClass('sortable');
			}
				
		
		if (n!=3)
		{
			template.appendTo(holder);
		}
		else
		{
			var newElement = $('<div class="row-fluid"></div>');
			template.appendTo(newElement);
			
			newElement.appendTo("#widget-content-cats");
			// set the dropable widgets
		}

		var info = template.find('.grp_name');
		if (info) info.val("Group " + (nCats+1));

		var clr = color.shift();
		info = template.find('.grp_color');
		if (info) info.val(clr);
		g = template.find('.cat_color');
		if (g) g.css('background-color',clr);
		
		holder = $('#widget-content-cats');
		allcats = holder.find(".span4");
		nCats = allcats.length;
		allcats.each(function(index)
			{
				$(this).attr('id','cat_'+index); 
				var setting = $(this).find(".btn-setting");
				if (setting) setting.attr('data-category','cat_'+index);
				var close = $(this).find(".btn-close");
				if (close) close.attr('data-category','cat_'+index);
				var dropz = $(this).find(".sortable");
				dropz.attr('id','category_'+index); 
			});

		if (nCats==9)
		{
			$('#catg-New').attr('disabled','disabled');
		}
		is_dirty = true;	
		$("#catg-Save").removeClass("disabled");
		
		updateSortables();
	};


	//initialise the blockUI widget on AJAX calls
	$.blockUI.defaults.baseZ = 1100; 
	$(document).ajaxStop($.unblockUI);

	
	$(window).bind('beforeunload', function(){
		if (is_dirty == true)
	  		return 'Are you sure you want to leave?';
	});

	$("#catg-New").click(onClickNew);
	$("#catg-Save").click(saveCategory);
	$("#catg-Reset-Confirm").click(resetCategory);
		
	$("#dlg_save").click(saveDialog);

	$('input.minicolors').minicolors({animationSpeed: 100,control: "wheel"});

	$('#dlgSetting').on('hidden', function () {
        console.log("hide");
	});
	
	updateSortables();
	{% endif %}

});

</script>

{#
<script>
$(document).ready(function() {
	var lemmas = {{ lemmas|json_encode|raw  }};
	
	function split( val ) {
		 return val.split( /,\s*/ );
	};

	function extractLast( term ) {
		 return split( term ).pop();
	};

	$( "#tags" )
		// don't navigate away from the field on tab when selecting an item
		.bind( "keydown", function( event ) {
			console.log(event.keyCode);
			if ( event.keyCode === $.ui.keyCode.TAB &&
				$( this ).data( "ui-autocomplete" ).menu.active ) {
					event.preventDefault();
				}
			})
		// Define and attach the autocomplete UI
		.autocomplete({
			minLength: 0,
			source: function( request, response ) {
				// delegate back to autocomplete, but extract the last term
				response( $.ui.autocomplete.filter(
					lemmas, extractLast( request.term ) ) );
				},
			focus: function() {
				// prevent value inserted on focus
				return false;
				},
			select: function( event, ui ) {
				var terms = split( this.value );
				// remove the current input
				terms.pop();
				// add the selected item
				terms.push( ui.item.value );
				// add placeholder to get the comma-and-space at the end
				terms.push( "" );
				this.value = terms.join( ", " );
				return false;
				}
			}) .data( "ui-autocomplete" )._renderItem = function( ul, item ) {
				
				return $( "<li>" )
				.append("{{ ngram.toBtnString('item',false,true) }}")
				.appendTo( ul );
				};;		 

	 $('input#filter').keyup(function(){
	        
	        var searchText = $(this).val().toLowerCase(),
	            $allListElements = $('ul#category_all > li'),
	            $matchingListElements = $allListElements.filter(function(i, el){
	                return $(el).text().indexOf(searchText) !== -1;
	            });
	        
	        $allListElements.hide();
	        $matchingListElements.show();
	        
	    });
	    


 

    	    
	
	//initialise the blockUI widget on AJAX calls
	$.blockUI.defaults.baseZ = 1100; 
	$(document).ajaxStop($.unblockUI);
	updateSortable();





	
});

</script>
#}
{% endblock %}